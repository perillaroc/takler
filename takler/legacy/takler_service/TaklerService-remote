#!/usr/bin/env python
#
# Autogenerated by Thrift Compiler (0.9.1)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

import sys
import pprint
from urlparse import urlparse
from thrift.transport import TTransport
from thrift.transport import TSocket
from thrift.transport import THttpClient
from thrift.protocol import TBinaryProtocol

from takler_service import TaklerService
from takler_service.ttypes import *

if len(sys.argv) <= 1 or sys.argv[1] == '--help':
  print ''
  print 'Usage: ' + sys.argv[0] + ' [-h host[:port]] [-u url] [-f[ramed]] function [arg1 [arg2...]]'
  print ''
  print 'Functions:'
  print '  ServiceResponse queue(string node_path)'
  print '  ServiceResponse run(string node_path)'
  print '  ServiceResponse init(string node_path, string task_id)'
  print '  ServiceResponse complete(string node_path)'
  print '  ServiceResponse abort(string node_path)'
  print '  ServiceResponse kill(string node_path)'
  print '  ServiceResponse bunch_tree()'
  print '  ServiceResponse add_suite(string suite_json_str)'
  print '  ServiceResponse update_suite(string suite_json_str)'
  print '  ServiceResponse update_node(string node_path, string node_json_str)'
  print ''
  sys.exit(0)

pp = pprint.PrettyPrinter(indent = 2)
host = 'localhost'
port = 9090
uri = ''
framed = False
http = False
argi = 1

if sys.argv[argi] == '-h':
  parts = sys.argv[argi+1].split(':')
  host = parts[0]
  if len(parts) > 1:
    port = int(parts[1])
  argi += 2

if sys.argv[argi] == '-u':
  url = urlparse(sys.argv[argi+1])
  parts = url[1].split(':')
  host = parts[0]
  if len(parts) > 1:
    port = int(parts[1])
  else:
    port = 80
  uri = url[2]
  if url[4]:
    uri += '?%s' % url[4]
  http = True
  argi += 2

if sys.argv[argi] == '-f' or sys.argv[argi] == '-framed':
  framed = True
  argi += 1

cmd = sys.argv[argi]
args = sys.argv[argi+1:]

if http:
  transport = THttpClient.THttpClient(host, port, uri)
else:
  socket = TSocket.TSocket(host, port)
  if framed:
    transport = TTransport.TFramedTransport(socket)
  else:
    transport = TTransport.TBufferedTransport(socket)
protocol = TBinaryProtocol.TBinaryProtocol(transport)
client = TaklerService.Client(protocol)
transport.open()

if cmd == 'queue':
  if len(args) != 1:
    print 'queue requires 1 args'
    sys.exit(1)
  pp.pprint(client.queue(args[0],))

elif cmd == 'run':
  if len(args) != 1:
    print 'run requires 1 args'
    sys.exit(1)
  pp.pprint(client.run(args[0],))

elif cmd == 'init':
  if len(args) != 2:
    print 'init requires 2 args'
    sys.exit(1)
  pp.pprint(client.init(args[0],args[1],))

elif cmd == 'complete':
  if len(args) != 1:
    print 'complete requires 1 args'
    sys.exit(1)
  pp.pprint(client.complete(args[0],))

elif cmd == 'abort':
  if len(args) != 1:
    print 'abort requires 1 args'
    sys.exit(1)
  pp.pprint(client.abort(args[0],))

elif cmd == 'kill':
  if len(args) != 1:
    print 'kill requires 1 args'
    sys.exit(1)
  pp.pprint(client.kill(args[0],))

elif cmd == 'bunch_tree':
  if len(args) != 0:
    print 'bunch_tree requires 0 args'
    sys.exit(1)
  pp.pprint(client.bunch_tree())

elif cmd == 'add_suite':
  if len(args) != 1:
    print 'add_suite requires 1 args'
    sys.exit(1)
  pp.pprint(client.add_suite(args[0],))

elif cmd == 'update_suite':
  if len(args) != 1:
    print 'update_suite requires 1 args'
    sys.exit(1)
  pp.pprint(client.update_suite(args[0],))

elif cmd == 'update_node':
  if len(args) != 2:
    print 'update_node requires 2 args'
    sys.exit(1)
  pp.pprint(client.update_node(args[0],args[1],))

else:
  print 'Unrecognized method %s' % cmd
  sys.exit(1)

transport.close()
