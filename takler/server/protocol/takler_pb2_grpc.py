# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

from takler.server.protocol import takler_pb2 as takler_dot_server_dot_protocol_dot_takler__pb2

GRPC_GENERATED_VERSION = '1.67.1'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in takler/server/protocol/takler_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class TaklerServerStub(object):
    """------------------------------------------

    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.RunCommandInit = channel.unary_unary(
                '/takler_protocol.TaklerServer/RunCommandInit',
                request_serializer=takler_dot_server_dot_protocol_dot_takler__pb2.InitCommand.SerializeToString,
                response_deserializer=takler_dot_server_dot_protocol_dot_takler__pb2.ServiceResponse.FromString,
                _registered_method=True)
        self.RunCommandComplete = channel.unary_unary(
                '/takler_protocol.TaklerServer/RunCommandComplete',
                request_serializer=takler_dot_server_dot_protocol_dot_takler__pb2.CompleteCommand.SerializeToString,
                response_deserializer=takler_dot_server_dot_protocol_dot_takler__pb2.ServiceResponse.FromString,
                _registered_method=True)
        self.RunCommandAbort = channel.unary_unary(
                '/takler_protocol.TaklerServer/RunCommandAbort',
                request_serializer=takler_dot_server_dot_protocol_dot_takler__pb2.AbortCommand.SerializeToString,
                response_deserializer=takler_dot_server_dot_protocol_dot_takler__pb2.ServiceResponse.FromString,
                _registered_method=True)
        self.RunCommandEvent = channel.unary_unary(
                '/takler_protocol.TaklerServer/RunCommandEvent',
                request_serializer=takler_dot_server_dot_protocol_dot_takler__pb2.EventCommand.SerializeToString,
                response_deserializer=takler_dot_server_dot_protocol_dot_takler__pb2.ServiceResponse.FromString,
                _registered_method=True)
        self.RunCommandMeter = channel.unary_unary(
                '/takler_protocol.TaklerServer/RunCommandMeter',
                request_serializer=takler_dot_server_dot_protocol_dot_takler__pb2.MeterCommand.SerializeToString,
                response_deserializer=takler_dot_server_dot_protocol_dot_takler__pb2.ServiceResponse.FromString,
                _registered_method=True)
        self.RunCommandRequeue = channel.unary_unary(
                '/takler_protocol.TaklerServer/RunCommandRequeue',
                request_serializer=takler_dot_server_dot_protocol_dot_takler__pb2.RequeueCommand.SerializeToString,
                response_deserializer=takler_dot_server_dot_protocol_dot_takler__pb2.ServiceResponse.FromString,
                _registered_method=True)
        self.RunCommandSuspend = channel.unary_unary(
                '/takler_protocol.TaklerServer/RunCommandSuspend',
                request_serializer=takler_dot_server_dot_protocol_dot_takler__pb2.SuspendCommand.SerializeToString,
                response_deserializer=takler_dot_server_dot_protocol_dot_takler__pb2.ServiceResponse.FromString,
                _registered_method=True)
        self.RunCommandResume = channel.unary_unary(
                '/takler_protocol.TaklerServer/RunCommandResume',
                request_serializer=takler_dot_server_dot_protocol_dot_takler__pb2.SuspendCommand.SerializeToString,
                response_deserializer=takler_dot_server_dot_protocol_dot_takler__pb2.ServiceResponse.FromString,
                _registered_method=True)
        self.RunCommandRun = channel.unary_unary(
                '/takler_protocol.TaklerServer/RunCommandRun',
                request_serializer=takler_dot_server_dot_protocol_dot_takler__pb2.RunCommand.SerializeToString,
                response_deserializer=takler_dot_server_dot_protocol_dot_takler__pb2.ServiceResponse.FromString,
                _registered_method=True)
        self.RunCommandForce = channel.unary_unary(
                '/takler_protocol.TaklerServer/RunCommandForce',
                request_serializer=takler_dot_server_dot_protocol_dot_takler__pb2.ForceCommand.SerializeToString,
                response_deserializer=takler_dot_server_dot_protocol_dot_takler__pb2.ServiceResponse.FromString,
                _registered_method=True)
        self.RunCommandFreeDep = channel.unary_unary(
                '/takler_protocol.TaklerServer/RunCommandFreeDep',
                request_serializer=takler_dot_server_dot_protocol_dot_takler__pb2.FreeDepCommand.SerializeToString,
                response_deserializer=takler_dot_server_dot_protocol_dot_takler__pb2.ServiceResponse.FromString,
                _registered_method=True)
        self.RunCommandLoad = channel.unary_unary(
                '/takler_protocol.TaklerServer/RunCommandLoad',
                request_serializer=takler_dot_server_dot_protocol_dot_takler__pb2.LoadCommand.SerializeToString,
                response_deserializer=takler_dot_server_dot_protocol_dot_takler__pb2.ServiceResponse.FromString,
                _registered_method=True)
        self.RunRequestShow = channel.unary_unary(
                '/takler_protocol.TaklerServer/RunRequestShow',
                request_serializer=takler_dot_server_dot_protocol_dot_takler__pb2.ShowRequest.SerializeToString,
                response_deserializer=takler_dot_server_dot_protocol_dot_takler__pb2.ShowResponse.FromString,
                _registered_method=True)
        self.RunRequestPing = channel.unary_unary(
                '/takler_protocol.TaklerServer/RunRequestPing',
                request_serializer=takler_dot_server_dot_protocol_dot_takler__pb2.PingRequest.SerializeToString,
                response_deserializer=takler_dot_server_dot_protocol_dot_takler__pb2.PingResponse.FromString,
                _registered_method=True)
        self.QueryCoroutine = channel.unary_unary(
                '/takler_protocol.TaklerServer/QueryCoroutine',
                request_serializer=takler_dot_server_dot_protocol_dot_takler__pb2.CoroutineRequest.SerializeToString,
                response_deserializer=takler_dot_server_dot_protocol_dot_takler__pb2.CoroutineResponse.FromString,
                _registered_method=True)


class TaklerServerServicer(object):
    """------------------------------------------

    """

    def RunCommandInit(self, request, context):
        """child command
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RunCommandComplete(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RunCommandAbort(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RunCommandEvent(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RunCommandMeter(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RunCommandRequeue(self, request, context):
        """control command

        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RunCommandSuspend(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RunCommandResume(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RunCommandRun(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RunCommandForce(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RunCommandFreeDep(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RunCommandLoad(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RunRequestShow(self, request, context):
        """query command

        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RunRequestPing(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def QueryCoroutine(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_TaklerServerServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'RunCommandInit': grpc.unary_unary_rpc_method_handler(
                    servicer.RunCommandInit,
                    request_deserializer=takler_dot_server_dot_protocol_dot_takler__pb2.InitCommand.FromString,
                    response_serializer=takler_dot_server_dot_protocol_dot_takler__pb2.ServiceResponse.SerializeToString,
            ),
            'RunCommandComplete': grpc.unary_unary_rpc_method_handler(
                    servicer.RunCommandComplete,
                    request_deserializer=takler_dot_server_dot_protocol_dot_takler__pb2.CompleteCommand.FromString,
                    response_serializer=takler_dot_server_dot_protocol_dot_takler__pb2.ServiceResponse.SerializeToString,
            ),
            'RunCommandAbort': grpc.unary_unary_rpc_method_handler(
                    servicer.RunCommandAbort,
                    request_deserializer=takler_dot_server_dot_protocol_dot_takler__pb2.AbortCommand.FromString,
                    response_serializer=takler_dot_server_dot_protocol_dot_takler__pb2.ServiceResponse.SerializeToString,
            ),
            'RunCommandEvent': grpc.unary_unary_rpc_method_handler(
                    servicer.RunCommandEvent,
                    request_deserializer=takler_dot_server_dot_protocol_dot_takler__pb2.EventCommand.FromString,
                    response_serializer=takler_dot_server_dot_protocol_dot_takler__pb2.ServiceResponse.SerializeToString,
            ),
            'RunCommandMeter': grpc.unary_unary_rpc_method_handler(
                    servicer.RunCommandMeter,
                    request_deserializer=takler_dot_server_dot_protocol_dot_takler__pb2.MeterCommand.FromString,
                    response_serializer=takler_dot_server_dot_protocol_dot_takler__pb2.ServiceResponse.SerializeToString,
            ),
            'RunCommandRequeue': grpc.unary_unary_rpc_method_handler(
                    servicer.RunCommandRequeue,
                    request_deserializer=takler_dot_server_dot_protocol_dot_takler__pb2.RequeueCommand.FromString,
                    response_serializer=takler_dot_server_dot_protocol_dot_takler__pb2.ServiceResponse.SerializeToString,
            ),
            'RunCommandSuspend': grpc.unary_unary_rpc_method_handler(
                    servicer.RunCommandSuspend,
                    request_deserializer=takler_dot_server_dot_protocol_dot_takler__pb2.SuspendCommand.FromString,
                    response_serializer=takler_dot_server_dot_protocol_dot_takler__pb2.ServiceResponse.SerializeToString,
            ),
            'RunCommandResume': grpc.unary_unary_rpc_method_handler(
                    servicer.RunCommandResume,
                    request_deserializer=takler_dot_server_dot_protocol_dot_takler__pb2.SuspendCommand.FromString,
                    response_serializer=takler_dot_server_dot_protocol_dot_takler__pb2.ServiceResponse.SerializeToString,
            ),
            'RunCommandRun': grpc.unary_unary_rpc_method_handler(
                    servicer.RunCommandRun,
                    request_deserializer=takler_dot_server_dot_protocol_dot_takler__pb2.RunCommand.FromString,
                    response_serializer=takler_dot_server_dot_protocol_dot_takler__pb2.ServiceResponse.SerializeToString,
            ),
            'RunCommandForce': grpc.unary_unary_rpc_method_handler(
                    servicer.RunCommandForce,
                    request_deserializer=takler_dot_server_dot_protocol_dot_takler__pb2.ForceCommand.FromString,
                    response_serializer=takler_dot_server_dot_protocol_dot_takler__pb2.ServiceResponse.SerializeToString,
            ),
            'RunCommandFreeDep': grpc.unary_unary_rpc_method_handler(
                    servicer.RunCommandFreeDep,
                    request_deserializer=takler_dot_server_dot_protocol_dot_takler__pb2.FreeDepCommand.FromString,
                    response_serializer=takler_dot_server_dot_protocol_dot_takler__pb2.ServiceResponse.SerializeToString,
            ),
            'RunCommandLoad': grpc.unary_unary_rpc_method_handler(
                    servicer.RunCommandLoad,
                    request_deserializer=takler_dot_server_dot_protocol_dot_takler__pb2.LoadCommand.FromString,
                    response_serializer=takler_dot_server_dot_protocol_dot_takler__pb2.ServiceResponse.SerializeToString,
            ),
            'RunRequestShow': grpc.unary_unary_rpc_method_handler(
                    servicer.RunRequestShow,
                    request_deserializer=takler_dot_server_dot_protocol_dot_takler__pb2.ShowRequest.FromString,
                    response_serializer=takler_dot_server_dot_protocol_dot_takler__pb2.ShowResponse.SerializeToString,
            ),
            'RunRequestPing': grpc.unary_unary_rpc_method_handler(
                    servicer.RunRequestPing,
                    request_deserializer=takler_dot_server_dot_protocol_dot_takler__pb2.PingRequest.FromString,
                    response_serializer=takler_dot_server_dot_protocol_dot_takler__pb2.PingResponse.SerializeToString,
            ),
            'QueryCoroutine': grpc.unary_unary_rpc_method_handler(
                    servicer.QueryCoroutine,
                    request_deserializer=takler_dot_server_dot_protocol_dot_takler__pb2.CoroutineRequest.FromString,
                    response_serializer=takler_dot_server_dot_protocol_dot_takler__pb2.CoroutineResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'takler_protocol.TaklerServer', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('takler_protocol.TaklerServer', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class TaklerServer(object):
    """------------------------------------------

    """

    @staticmethod
    def RunCommandInit(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/takler_protocol.TaklerServer/RunCommandInit',
            takler_dot_server_dot_protocol_dot_takler__pb2.InitCommand.SerializeToString,
            takler_dot_server_dot_protocol_dot_takler__pb2.ServiceResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def RunCommandComplete(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/takler_protocol.TaklerServer/RunCommandComplete',
            takler_dot_server_dot_protocol_dot_takler__pb2.CompleteCommand.SerializeToString,
            takler_dot_server_dot_protocol_dot_takler__pb2.ServiceResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def RunCommandAbort(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/takler_protocol.TaklerServer/RunCommandAbort',
            takler_dot_server_dot_protocol_dot_takler__pb2.AbortCommand.SerializeToString,
            takler_dot_server_dot_protocol_dot_takler__pb2.ServiceResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def RunCommandEvent(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/takler_protocol.TaklerServer/RunCommandEvent',
            takler_dot_server_dot_protocol_dot_takler__pb2.EventCommand.SerializeToString,
            takler_dot_server_dot_protocol_dot_takler__pb2.ServiceResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def RunCommandMeter(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/takler_protocol.TaklerServer/RunCommandMeter',
            takler_dot_server_dot_protocol_dot_takler__pb2.MeterCommand.SerializeToString,
            takler_dot_server_dot_protocol_dot_takler__pb2.ServiceResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def RunCommandRequeue(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/takler_protocol.TaklerServer/RunCommandRequeue',
            takler_dot_server_dot_protocol_dot_takler__pb2.RequeueCommand.SerializeToString,
            takler_dot_server_dot_protocol_dot_takler__pb2.ServiceResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def RunCommandSuspend(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/takler_protocol.TaklerServer/RunCommandSuspend',
            takler_dot_server_dot_protocol_dot_takler__pb2.SuspendCommand.SerializeToString,
            takler_dot_server_dot_protocol_dot_takler__pb2.ServiceResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def RunCommandResume(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/takler_protocol.TaklerServer/RunCommandResume',
            takler_dot_server_dot_protocol_dot_takler__pb2.SuspendCommand.SerializeToString,
            takler_dot_server_dot_protocol_dot_takler__pb2.ServiceResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def RunCommandRun(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/takler_protocol.TaklerServer/RunCommandRun',
            takler_dot_server_dot_protocol_dot_takler__pb2.RunCommand.SerializeToString,
            takler_dot_server_dot_protocol_dot_takler__pb2.ServiceResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def RunCommandForce(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/takler_protocol.TaklerServer/RunCommandForce',
            takler_dot_server_dot_protocol_dot_takler__pb2.ForceCommand.SerializeToString,
            takler_dot_server_dot_protocol_dot_takler__pb2.ServiceResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def RunCommandFreeDep(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/takler_protocol.TaklerServer/RunCommandFreeDep',
            takler_dot_server_dot_protocol_dot_takler__pb2.FreeDepCommand.SerializeToString,
            takler_dot_server_dot_protocol_dot_takler__pb2.ServiceResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def RunCommandLoad(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/takler_protocol.TaklerServer/RunCommandLoad',
            takler_dot_server_dot_protocol_dot_takler__pb2.LoadCommand.SerializeToString,
            takler_dot_server_dot_protocol_dot_takler__pb2.ServiceResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def RunRequestShow(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/takler_protocol.TaklerServer/RunRequestShow',
            takler_dot_server_dot_protocol_dot_takler__pb2.ShowRequest.SerializeToString,
            takler_dot_server_dot_protocol_dot_takler__pb2.ShowResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def RunRequestPing(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/takler_protocol.TaklerServer/RunRequestPing',
            takler_dot_server_dot_protocol_dot_takler__pb2.PingRequest.SerializeToString,
            takler_dot_server_dot_protocol_dot_takler__pb2.PingResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def QueryCoroutine(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/takler_protocol.TaklerServer/QueryCoroutine',
            takler_dot_server_dot_protocol_dot_takler__pb2.CoroutineRequest.SerializeToString,
            takler_dot_server_dot_protocol_dot_takler__pb2.CoroutineResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
